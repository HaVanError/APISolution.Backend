// <auto-generated />
using System;
using APISolution.Database.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APISolution.Database.Migrations
{
    [DbContext(typeof(DdConnect))]
    partial class DdConnectModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APISolution.Database.Entity.DichVu", b =>
                {
                    b.Property<int>("IdDichVu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDichVu"));

                    b.Property<float>("Gia")
                        .HasColumnType("real");

                    b.Property<string>("NameDichVu")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.HasKey("IdDichVu");

                    b.HasIndex("IdDichVu", "NameDichVu");

                    b.ToTable("DichVu", (string)null);

                    b.HasData(
                        new
                        {
                            IdDichVu = 1,
                            Gia = 15000f,
                            NameDichVu = "Sting",
                            SoLuong = 1000
                        },
                        new
                        {
                            IdDichVu = 2,
                            Gia = 15000f,
                            NameDichVu = "Bò hút",
                            SoLuong = 1000
                        },
                        new
                        {
                            IdDichVu = 3,
                            Gia = 18000f,
                            NameDichVu = "Bia Sài Gòn",
                            SoLuong = 1000
                        },
                        new
                        {
                            IdDichVu = 4,
                            Gia = 22000f,
                            NameDichVu = "Thuốc lá Hero",
                            SoLuong = 1000
                        });
                });

            modelBuilder.Entity("APISolution.Database.Entity.LoaiPhong", b =>
                {
                    b.Property<int>("IdLoaiPhong")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLoaiPhong"));

                    b.Property<string>("MoTa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdLoaiPhong");

                    b.HasIndex("Name", "IdLoaiPhong")
                        .IsUnique();

                    b.ToTable("LoaiPhong", (string)null);

                    b.HasData(
                        new
                        {
                            IdLoaiPhong = 1,
                            MoTa = "Loại phòng VIP",
                            Name = "Vip"
                        },
                        new
                        {
                            IdLoaiPhong = 2,
                            MoTa = "Loại phòng Thường",
                            Name = "Thường"
                        });
                });

            modelBuilder.Entity("APISolution.Database.Entity.PhieuDatPhong", b =>
                {
                    b.Property<int>("IdPhieuDatPhong")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPhieuDatPhong"));

                    b.Property<float>("GiaPhong")
                        .HasColumnType("real");

                    b.Property<int>("IdPhong")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgayDatPhong")
                        .HasColumnType("datetime2");

                    b.Property<string>("SoDienThoai")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenNguoiDat")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenPhong")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdPhieuDatPhong");

                    b.HasIndex("IdPhong")
                        .IsUnique();

                    b.HasIndex("TenPhong", "TenNguoiDat");

                    b.ToTable("PhieuDatPhong", (string)null);
                });

            modelBuilder.Entity("APISolution.Database.Entity.PhieuDichVu", b =>
                {
                    b.Property<int>("IdPhieuDichVu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPhieuDichVu"));

                    b.Property<float>("Gia")
                        .HasColumnType("real");

                    b.Property<int>("IdDichVu")
                        .HasColumnType("int");

                    b.Property<int>("IdPhieuDatPhong")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgayDatDichVu")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PhongIdPhong")
                        .HasColumnType("int");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.Property<string>("TenDichVu")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenKhachHang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenPhong")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ThanhTien")
                        .HasColumnType("float");

                    b.HasKey("IdPhieuDichVu");

                    b.HasIndex("IdDichVu");

                    b.HasIndex("IdPhieuDatPhong");

                    b.HasIndex("PhongIdPhong");

                    b.HasIndex("TenDichVu", "IdPhieuDichVu");

                    b.ToTable("PhieuDatDichVu", (string)null);
                });

            modelBuilder.Entity("APISolution.Database.Entity.Phong", b =>
                {
                    b.Property<int>("IdPhong")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPhong"));

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("GiaPhong")
                        .HasColumnType("real");

                    b.Property<int>("IdLoaiPhong")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StatusPhong")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("IdPhong");

                    b.HasIndex("IdLoaiPhong");

                    b.HasIndex("IdPhong", "Name");

                    b.ToTable("Phong", (string)null);

                    b.HasData(
                        new
                        {
                            IdPhong = 1,
                            Describe = "Phòng Vip A1",
                            GiaPhong = 200000f,
                            IdLoaiPhong = 1,
                            Name = "A1",
                            StatusPhong = 0
                        },
                        new
                        {
                            IdPhong = 2,
                            Describe = "Phòng Vip A2",
                            GiaPhong = 200000f,
                            IdLoaiPhong = 1,
                            Name = "A2",
                            StatusPhong = 0
                        },
                        new
                        {
                            IdPhong = 3,
                            Describe = "Phòng Vip A3",
                            GiaPhong = 200000f,
                            IdLoaiPhong = 1,
                            Name = "A3",
                            StatusPhong = 0
                        },
                        new
                        {
                            IdPhong = 4,
                            Describe = "Phòng Vip B1",
                            GiaPhong = 150000f,
                            IdLoaiPhong = 2,
                            Name = "B1",
                            StatusPhong = 0
                        },
                        new
                        {
                            IdPhong = 5,
                            Describe = "Phòng Vip B2",
                            GiaPhong = 150000f,
                            IdLoaiPhong = 2,
                            Name = "B2",
                            StatusPhong = 0
                        });
                });

            modelBuilder.Entity("APISolution.Database.Entity.ResfreshToken", b =>
                {
                    b.Property<int>("IdToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdToken"));

                    b.Property<string>("Accesstoken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Resfreshtoken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idUser")
                        .HasColumnType("int");

                    b.HasKey("IdToken");

                    b.HasIndex("idUser")
                        .IsUnique();

                    b.ToTable("ResfreshTokens");
                });

            modelBuilder.Entity("APISolution.Database.Entity.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRole"));

                    b.Property<string>("MoTa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdRole");

                    b.HasIndex("IdRole", "NameRole");

                    b.ToTable("Quyen", (string)null);

                    b.HasData(
                        new
                        {
                            IdRole = 1,
                            MoTa = "Người quản trị hệ thống",
                            NameRole = "Admin"
                        },
                        new
                        {
                            IdRole = 2,
                            MoTa = "Người dùng hệ thống",
                            NameRole = "User"
                        });
                });

            modelBuilder.Entity("APISolution.Database.Entity.ThanhToan", b =>
                {
                    b.Property<int>("IdThanhToan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdThanhToan"));

                    b.Property<DateTime>("NgayThanhToan")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTraPhong")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenKhachHang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenPhong")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TongThanhTien")
                        .HasColumnType("float");

                    b.Property<int>("TrangThaiThanhToan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<int?>("idPhieuDatPhong")
                        .HasColumnType("int");

                    b.HasKey("IdThanhToan");

                    b.HasIndex("idPhieuDatPhong");

                    b.ToTable("ThanhToan", (string)null);
                });

            modelBuilder.Entity("APISolution.Database.Entity.ThanhToan_PhieuDatPhong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdPhieuDatPhong")
                        .HasColumnType("int");

                    b.Property<int>("IdThanhToan")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgayDat")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTra")
                        .HasColumnType("datetime2");

                    b.Property<int>("PhieuDatPhongIdPhieuDatPhong")
                        .HasColumnType("int");

                    b.Property<int>("ThanhToanIdThanhToan")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhieuDatPhongIdPhieuDatPhong");

                    b.HasIndex("ThanhToanIdThanhToan");

                    b.ToTable("ThanhToan_PhieuDatPhong", (string)null);
                });

            modelBuilder.Entity("APISolution.Database.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("200");

                    b.Property<string>("City")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("100");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("50");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.HasIndex("Id", "Name");

                    b.ToTable("UserInformation", (string)null);
                });

            modelBuilder.Entity("APISolution.Database.Entity.PhieuDatPhong", b =>
                {
                    b.HasOne("APISolution.Database.Entity.Phong", "Phong")
                        .WithOne("PhieuDatPhongs")
                        .HasForeignKey("APISolution.Database.Entity.PhieuDatPhong", "IdPhong")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Phong");
                });

            modelBuilder.Entity("APISolution.Database.Entity.PhieuDichVu", b =>
                {
                    b.HasOne("APISolution.Database.Entity.DichVu", "DichVu")
                        .WithMany("PhieuDichVus")
                        .HasForeignKey("IdDichVu")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("APISolution.Database.Entity.PhieuDatPhong", "PhieuDatPhong")
                        .WithMany("PhieuDichVus")
                        .HasForeignKey("IdPhieuDatPhong")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("APISolution.Database.Entity.Phong", null)
                        .WithMany("PhieuDichVus")
                        .HasForeignKey("PhongIdPhong");

                    b.Navigation("DichVu");

                    b.Navigation("PhieuDatPhong");
                });

            modelBuilder.Entity("APISolution.Database.Entity.Phong", b =>
                {
                    b.HasOne("APISolution.Database.Entity.LoaiPhong", "LoaiPhongs")
                        .WithMany("Phong")
                        .HasForeignKey("IdLoaiPhong")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LoaiPhongs");
                });

            modelBuilder.Entity("APISolution.Database.Entity.ResfreshToken", b =>
                {
                    b.HasOne("APISolution.Database.Entity.User", "User")
                        .WithOne("ResfreshToken")
                        .HasForeignKey("APISolution.Database.Entity.ResfreshToken", "idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("APISolution.Database.Entity.ThanhToan", b =>
                {
                    b.HasOne("APISolution.Database.Entity.PhieuDatPhong", "PhieuDatPhong")
                        .WithMany("ThanhToans")
                        .HasForeignKey("idPhieuDatPhong")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PhieuDatPhong");
                });

            modelBuilder.Entity("APISolution.Database.Entity.ThanhToan_PhieuDatPhong", b =>
                {
                    b.HasOne("APISolution.Database.Entity.PhieuDatPhong", "PhieuDatPhong")
                        .WithMany()
                        .HasForeignKey("PhieuDatPhongIdPhieuDatPhong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APISolution.Database.Entity.ThanhToan", "ThanhToan")
                        .WithMany()
                        .HasForeignKey("ThanhToanIdThanhToan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhieuDatPhong");

                    b.Navigation("ThanhToan");
                });

            modelBuilder.Entity("APISolution.Database.Entity.User", b =>
                {
                    b.HasOne("APISolution.Database.Entity.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("APISolution.Database.Entity.DichVu", b =>
                {
                    b.Navigation("PhieuDichVus");
                });

            modelBuilder.Entity("APISolution.Database.Entity.LoaiPhong", b =>
                {
                    b.Navigation("Phong");
                });

            modelBuilder.Entity("APISolution.Database.Entity.PhieuDatPhong", b =>
                {
                    b.Navigation("PhieuDichVus");

                    b.Navigation("ThanhToans");
                });

            modelBuilder.Entity("APISolution.Database.Entity.Phong", b =>
                {
                    b.Navigation("PhieuDatPhongs")
                        .IsRequired();

                    b.Navigation("PhieuDichVus");
                });

            modelBuilder.Entity("APISolution.Database.Entity.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("APISolution.Database.Entity.User", b =>
                {
                    b.Navigation("ResfreshToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
